#include <msp430.h>
/**
 * main.c
 */
int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer

    P1DIR |= BIT0; //1.0 is an output
    P1DIR &= ~BIT3; //1.3 is an input

    P1DIR |= BIT6;//1.6 is an output

    P1REN |= BIT3; //enables the pull down resistor
    P1OUT |= BIT3; //sets the pull down resistor

    TA0CCTL1 = CCIE; //interrupt enabled
    TA0CCR0 = 1000 ; //counts up to 1000
    TA0CCR1 = 500; //sets duty cycle to initially be 50%

    P1IE |= BIT3; //button interrupt
    P1IES |=BIT3; //sets to rising edge
    P1IFG &= ~BIT3; //clears interupt flag

    TA0CTL = TASSEL_2 + MC_1 + ID_2 + TAIE; //Sets to have smclk, in up mode with divider of 4

    __bis_SR_register(GIE);
}
#pragma vector = PORT1_VECTOR;
__interrupt void Port_1(void)
{
    if(P1IES & BIT3)
    {
        P1OUT |= BIT0; //turns led on
        P1IES &= ~BIT3;//sets to falling edge
    }
    else
    {
        P1OUT &= ~BIT0; //turns LED off
        P1IES |= BIT3;//sets to falling edge
    }

    if(TA0CCR1<= 1000  && TB0CCR1 >= 0)
    {
        TA0CCR1 += 100; //adds 10% to duty cycle each interrupt
    }else{
        TA0CCR1 = 0; //resets duty cycle
    }
    P1IFG &= ~BIT3; //clears flag
}
#pragma vector=TIMER0_A1_VECTOR
__interrupt void TIMER0_A0(void) {

    switch(TA0IV)
    {
        case 2: P1OUT &= ~BIT6; break; //turns led off
        case 4: break;
        case 10: P1OUT |= BIT6; //when overflow turn on 1.6 LED
            break;
    }
}
