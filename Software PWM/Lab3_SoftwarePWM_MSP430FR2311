#include <msp430.h>


/**
 * main.c
 */
int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer
    PM5CTL0 &= ~LOCKLPM5; //enables the gpio pins
    P1DIR |= BIT0; //1.0 is an output
    P2DIR |= BIT0; //2.0 is an output
    P1DIR &= ~BIT1; //1.1 as an input
    P1REN |= BIT1; //enables the pull down resistor
    P1OUT |= BIT1; //sets the pull down resistor
    TB0CCTL1 = CCIE; //interrupt enabled
    TB0CCR0 = 1000; //counts up to 1000
    TB0CCR1 = 500; //sets duty cycle to initially be 50%
    P1IE |= BIT1; //button interrupt
    P1IES |=BIT1; //sets to rising edge
    P1IFG &= ~BIT1; //clears interrupt flag

    TB0CTL = TBSSEL_2 + MC_1 + ID_2 + TBIE; //Sets to have smclk, in up mode with divider of 4

    __bis_SR_register(GIE);
}
#pragma vector = PORT1_VECTOR;
__interrupt void Port_1(void)
{
    if(P1IES & BIT1)
    {
        P1OUT |= BIT0; //turns led on
        P1IES &= ~BIT1;//sets to falling edge
    }else
    {
        P1OUT &= ~BIT0;//turns led off
        P1IES |= BIT1;//sets to falling edge
    }

    if(TB0CCR1< 1000 && TB0CCR1 >= 0)
    {
        TB0CCR1 += 100; //adds 10% to duty cycle each interrupt
    }
    else
    {
        TB0CCR1 = 0; //resets duty cycle
    }
    P1IFG &= ~BIT1; //clears flag

}
#pragma vector=TIMER0_B1_VECTOR
__interrupt void TIMER0_B0(void) {

    switch(TB0IV)
    {
        case 2: P2OUT &= ~BIT0; break; //turns led off
        case 4: break; //CCR2 not used
        case 14: P2OUT |= BIT0; //when overflow turn on 2.0 LED
            break;
    }

}
